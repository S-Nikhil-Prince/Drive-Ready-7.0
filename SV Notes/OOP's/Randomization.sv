Randomization:
    >in order to check the design we are providing random signals to the DUT.
    >for large designs verification enginner need to provide many number of stimulus or test vectors.
    >and it is very difficult to apply and anaylze each and every test vector.
    >so the above statement required to produce random test cases and those random test cases are created
     or generated by using randomization concept.

It can be classified into 2 types
    1) Pre Randomization
        in order to verify the we are providing pre randomization
    2) Post Randomization
        in order to get randomized values after verifying the DUT we use post randomization.
    
*** Randomization Declared in the class and called in the module tb.

rand :-
    when we use rand it generates repeated values also.

randc :- (random cyclic)
    when we use randc it dosent generate repeated values until cycle completes
---------------------------------------------------------------------------------------------------------------------------

Constraints:
    >when DUT works for only particular range of inputs as per features.
    >so to satisfy this we need to write the constraints.
    >constraints become extremly important in randomization
    >constraints are Declared within the class.
    >in class after randomization only constraints are possible
Syntax:'
constraint cs {
    varables_list {"a=10;a=20;a=30"};
}

Types of constraints:
    1)Inline Constraints
        ->used to introduce an additional constraint.
            example:
            constraint vlsi{
                variable{}
            }
    2)Inside Constraints
        ->randomize the variables which are within the range of values
            Example
            constraint c1{
                array_size inside { [10:0] };
            }
            constraint c2{
                for each (arr[i])
                arr inside{1,2,3,4,5};
                }
                -=-=-=-=
                program:
                class sample;
                  rand int x;
                  constraint ci{ x inside {[20:35]}; }
                endclass
                
                module top;
                  sample s;
                  initial begin
                    s=new();
                    repeat (10) begin
                      assert (s.randomize());
                      $display("x=%0d",s.x);
                    end
                  end
                endmodule
                Output:
                # KERNEL: x=24
                # KERNEL: x=24
                # KERNEL: x=34
                # KERNEL: x=32
                # KERNEL: x=23
                # KERNEL: x=26
                # KERNEL: x=35
                # KERNEL: x=30
                # KERNEL: x=27
                # KERNEL: x=35
                
                combination of ranges :
                `define starting_range 60
                `define ending_range 80
                
                class sample # (parameter int p1 = 90, int p2 = 110);
                  rand bit[7:0] a;
                  rand bit[7:0] b;
                  rand bit[7:0] c;
                  rand bit[7:0] d;
                  rand bit[7:0] e;
                  constraint c1 { a inside {[20:35]};}
                  constraint c2 { b inside {5,9};}
                  constraint c3 { c inside {[32:47],60,70};}
                  constraint c4 { d inside {[`starting_range : `ending_range]};}
                  constraint c5 { e inside {[p1:p2]};}
                endclass
                
                module top;
                  sample s;
                  initial begin
                    s=new();
                    repeat (10) begin
                      assert (s.randomize());
                      $display("a=%0d,b=%0d,c=%0d,d=%0d,e=%0d",s.a,s.b,s.c,s.d,s.e);
                    end
                  end
                endmodule
                output:
                # KERNEL: a=24,b=9,c=45,d=64,e=100
                # KERNEL: a=24,b=5,c=36,d=68,e=95
                # KERNEL: a=32,b=5,c=45,d=69,e=103
                # KERNEL: a=32,b=5,c=42,d=63,e=103
                # KERNEL: a=22,b=5,c=35,d=80,e=107
                # KERNEL: a=24,b=5,c=40,d=65,e=108
                # KERNEL: a=22,b=5,c=35,d=74,e=91
                # KERNEL: a=35,b=5,c=39,d=79,e=90
                # KERNEL: a=30,b=5,c=32,d=64,e=102
                # KERNEL: a=31,b=5,c=45,d=79,e=102
                -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    3)Soft Constraints
        ->to overwrite the constraint we use the soft keyword
        ->soft constraint is used to off the constraint
        example:
            constraint c1{soft a==20;}// off the constraint
            constraint c1{soft a==25;}

            Constraint Overriding:
                if we use 2 constraints with same name then the values are overriden.
                Example:
                consaraint c1 {a=100;}
                constraint c1 {a=150;}

            Randomization Failed Error:
                in constraints due to the constraint conflict it will give the randomization fail error.
                example:
                    constraint c1{a>>10;}
                    constraint c2{a<<10;}

    4)Distributed or Weighted Constraints
        ->controls the values on randomization
        ->Keyword "dist"
        -> distributed operator is ":="
            -> it is used to assign the specified weight to the item.
            example:
                constraint c1{[a.dist{10:30==200],[20:50==500]};}
                from here 10,11,12.....30 each value gets weighted with 200
            =-=-=-=-=-=-=-=-=-
            Program:
            class sample;
            rand int a;
            constraint cd {a dist { [100:200]:/2,400:/3,600:/5};} 
            endclass

            module tb;
            sample s = new();
            initial begin
                repeat (10) begin
                assert (s.randomize());
                $display("a=%0d",s.a);
                end
            end
            endmodule
            output:
            # KERNEL: a=400
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=600
            # KERNEL: a=149
            # KERNEL: a=600
            =-=-=-=-=-=-=-=-=-=-=-

    5)Conditional Constraints
        -> the implication operator can be used to declare conditional relation between 2 variables.
        -> implication Operator "->".
        -> it is placed in between expression and constraint.
        Syntax:
            constraint constraint_name/identifier {expression -> {constraint_select};} 
            
    6) Solve-Before Constraint
        example 
            constraint c1 {solve a; before b;}


    7) Unique Constraint
        -> it is used to generate unique values to the variable.
        example:
            constraint c1 {unique {[1:40]};}

        program (static array)
        class sample;
            //bit [7:0]a;
            rand bit [7:0] arrays[5];
            constraint cu { unique{arrays};}
        endclass

        module tb;
        sample s = new();
        initial begin
            //repeat(5) begin
            assert(s.randomize);
            foreach (s.arrays[i])
            $display("array[%0d]=%0d,",i,s.arrays[i]);
            //end
        end
        endmodule

        program (dynamic array)
        class sample;
        //bit [7:0]a;
        rand bit [7:0] arrays[];
        constraint cu { unique{arrays};arrays.size == 5 ;}
        //constraint cu {arrays inside {[35:50]};}
        endclass

        module tb;
        sample s = new();
        initial begin
            //repeat(5) begin
            assert(s.randomize);
            foreach (s.arrays[i])
            $display("array[%0d]=%0d,",i,s.arrays[i]);
            //end
        end
        endmodule

Modes Of Constraints:
    constraint mode (0); //disable mode
    constraint mode (1); //enable mode
    
    Example:
            parent.rand(0); 
            parent.rand(1);
            child.rand(0);
            child.rand(1);
            parent.randc(0); 
            parent.randc(1);
            child.randc(0);
            child.randc(1);
            
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


2) Distributed Constraint:


